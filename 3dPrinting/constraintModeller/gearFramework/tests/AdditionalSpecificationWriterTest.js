/*
 * author: Daniel Patterson
 *
 * Tests the SpecificationWriter, which should translate Component 
 * Specifications into Specifications that are understandable by the 3D Drawer.
 *
 * This version adds tests based on GearTrains and Gears
 */
var should = require('should')
var fs = require('fs')
var GearSpecification = require('../interface/GearSpecification.js').GearSpecification
var SpecificationWriter = require('../interface/SpecificationWriter.js').SpecificationWriter
var GearTest = require('../tests/GearTest.js')
var GearTrainTest = require('../tests/GearTrainTest.js')

describe('SpecificationWriter', function() {
	var writer, gear

	beforeEach(function(){
		writer = new SpecificationWriter()
		gear = GearTest.createFullySpecifiedTestGear()
	})

	describe('#addComponent', function() {
		it('should add a new Specification to the writer', function() {
			writer.getSpecifications().length.should.equal(0)
			writer.addComponent(gear)
			writer.getSpecifications().length.should.equal(1)
		})
	})

	describe('#addComponentGroup', function() {
		describe('When the ComponentGroup is a GearTrain', function() {
			var train

			beforeEach(function() {
				writer = new SpecificationWriter()
				train = GearTrainTest.createTestGearTrain()
				writer.addComponentGroup(train)
			})

			describe('when Spindles should be autogenerated but a Base should not be',
			         function() {
				beforeEach(function() {
					writer = new SpecificationWriter()
					train = GearTrainTest.createTestGearTrain()
					train.setGenerateSpindlesOnWrite(true)
					train.setGenerateBaseOnWrite(false)
					writer.addComponentGroup(train)
				})

				it('should add twice the number of Specifications as the GearTrain has '
				 + 'Gears', function() {
					writer.getSpecifications().length.should.equal(2 * train.getComponents().length)
				})
			})

			describe('when Spindles and Bases should not be autogenerated', function() {
				beforeEach(function() {
					writer = new SpecificationWriter()
					train = GearTrainTest.createTestGearTrain()
					train.setGenerateSpindlesOnWrite(false)
					train.setGenerateBaseOnWrite(false)
					writer.addComponentGroup(train)
				})

				it('should add the same number of Specifications as the GearTrain has '
				 + 'Gears', function() {
					writer.getSpecifications().length.should.equal(train.getComponents().length)
				})
			})	

			describe('when a Base should be autogenerated but Spindles should not be', 
				       function() {
				beforeEach(function() {
					writer = new SpecificationWriter()
					train = GearTrainTest.createTestGearTrain()
					train.setGenerateSpindlesOnWrite(false)
					train.setGenerateBaseOnWrite(true)
					writer.addComponentGroup(train)
				})
				
				it('should add one more Specification than the GearTrain has Gears',
				   function() {
					writer.getSpecifications().length.should.equal(train.getComponents().length + 1)
				})
			})

			describe('If the GearTrain contains overlapping Gears', function() {
				beforeEach(function() {
					writer = new SpecificationWriter()
					train = GearTrainTest.createInvalidTrainWithOverlappingGears()
				})
				
				it('should not be possible', function() {
					(function() {
						writer.addComponentGroup(train)
					}).should.throw()
				})

				describe('the error message generated', function() {
					var errorMessage, overlappingGears

					beforeEach(function() {
						overlappingGears = train.findTouchingNonAdjacentComponents()
						try {
							writer.addComponentGroup(train)
						} 
						catch(err) {
							errorMessage = err.message
						}
					})

					it('should contain a string representation of the overlapping gears',
					   function() {
						for (var i = overlappingGears.length - 1; i >= 0; i--) {
							errorMessage.should.contain(overlappingGears[i].toString())
						};
					})
				})
			})		
		})
	})

	describe('#writeSpecificationToFile', function() {
		var fileContents
		var drawerPath = '../3dDrawer/'
		var specFile = drawerPath + 'Specification.jscad'
		var mainFile = drawerPath + 'main.jscad'
		var paramFile = drawerPath + 'parameterDefinitions.txt'

		function writeToFileAndGetContents(fileName, done) {			
			writer.writeSpecificationToFile()
			fs.readFile(fileName, 'utf8', function(err, data) {
				fileContents = data
				done()
			})
		}

		describe('the generated Specification file', function() {
			beforeEach(function(done) {
				writeToFileAndGetContents(specFile, done)
			})

			describe('with two GearSpecifications added', function() {
				var otherGear

				beforeEach(function(done) { 
					otherGear = GearTest.createFullySpecifiedTestGear(10, 20, 4, 5, 6)
					writer.addComponent(gear)
					writer.addComponent(otherGear)
					writeToFileAndGetContents(specFile,done)
				})

				it('should contain a pretty-printed JSON String for both '
					 + 'GearSpecifications in an array', function() {
					var array = [gear.toSpecification(), 
					 	           otherGear.toSpecification()]
					fileContents.should.contain(JSON.stringify(array, null, 2))
				})

				describe('each with an autogenerated Spindle', function() {
					var spindle, otherSpindle

					beforeEach(function(done) { 
						writer = new SpecificationWriter()
						writer.addComponent(gear)
						writer.addComponent(otherGear)
						spindle = gear.generateSpindle()
						otherSpindle = otherGear.generateSpindle()
						writer.addComponent(spindle)
						writer.addComponent(otherSpindle)
						writeToFileAndGetContents(specFile, done)
					})

					it('should contain a pretty-printed JSON String for all Specifications '
						 + 'in an array', function() {
						var array = [gear.toSpecification(), 
						 	           otherGear.toSpecification(),
						 	           spindle.toSpecification(),
						 	           otherSpindle.toSpecification()]
						fileContents.should.contain(JSON.stringify(array, null, 2))
					})
				})
			})		
		})

		describe('with a test GearTrain added', function() {
			var train, array, arrayString

			beforeEach(function(done) {
				writer = new SpecificationWriter()
				train = GearTrainTest.createTestGearTrain()
				var gears = train.getComponents()
				array = [gears[0].toSpecification(), 
				         gears[1].toSpecification(), 
				         gears[0].generateSpindle().toSpecification(),
				         gears[1].generateSpindle().toSpecification(),
				         train.generateBase().toSpecification()]
				writer.addComponentGroup(train)
				writeToFileAndGetContents(specFile, done)
				arrayString = JSON.stringify(array, null, 2)
				arrayString = replaceIDsWithZero(arrayString)
			})

			function replaceIDsWithZero(string) {
				return string.replace(/\"id\": \d+,/g, '"id": 0,')
			}
			
			it('should contain a pretty-printed JSON String for all Specifications '
				 + 'in an array', function() {
				fileContents = replaceIDsWithZero(fileContents)
				fileContents.should.contain(arrayString)
			})
		}) 
	})
})