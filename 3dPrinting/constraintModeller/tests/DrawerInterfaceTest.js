/*
 * This file is part of programmatic-3d-printing, a programmatic 3d printer 
 * language, Copyright (c) 2014, Daniel Patterson <dan24patt@gmail.com>.
 * All rights reserved.
 * 
 * programmatic-3d-printing is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 * 
 * programmatic-3d-printing is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111, USA.
 */

/*
 * author: Daniel Patterson
 *
 * Tests the DrawerInterface which coordinates the conversion of the Component
 * system into OpenJSCAD files.
 */
var should = require('should')
var fs = require('fs')
var Configuration = require('../tests/TestConfiguration.js')
var DrawerInterface = require('../interface/DrawerInterface.js').DrawerInterface
var PlaceableComponentTest = require('../tests/PlaceableComponentTest.js')
var PlaceableComponentGroup = require('../components/PlaceableComponentGroup.js').PlaceableComponentGroup
var SpecificationWriterTest = require('../tests/SpecificationWriterTest.js')

describe('DrawerInterface', function() {
	var controller, component

	beforeEach(function() {
		controller = new DrawerInterface(Configuration) 
		component = PlaceableComponentTest.createFullySpecifiedTestComponent()
	})

	describe('#addComponent', function() {
		it('should add a new Component to the DrawerInterface', function() {
			controller.getComponents().length.should.equal(0)
			controller.addComponent(component)
			controller.getComponents().length.should.equal(1)
		})
	})

	describe('#addComponentGroup', function() {
		var group, otherComponent

		beforeEach(function() {
			group = new PlaceableComponentGroup()
			component = PlaceableComponentTest.createFullySpecifiedTestComponent(0, 0, 0, 1)
			group.addComponent(component)
		})

		describe('when the Components do not overlap', function() {
			beforeEach(function() {
				otherComponent = PlaceableComponentTest.createFullySpecifiedTestComponent(2, 2, 0, 1)
				group.addComponent(otherComponent)				
				controller.addComponentGroup(group) 
			})

			it('should add two Components to the DrawerInterface', function() {
				controller.getComponents().length.should.equal(2)
			})			
		})

		describe('when the Components do overlap', function() {
			beforeEach(function() {
				otherComponent = PlaceableComponentTest.createFullySpecifiedTestComponent(2, 2, 0, 10)
				group.addComponent(otherComponent)	
			})		
		
			it('should not be possible', function() {
				(function() {
					controller.addComponentGroup(group)
				}).should.throw()
			})

			describe('the error message generated', function() {
				var errorMessage, overlappingComponents
					beforeEach(function() {
					overlappingComponents = group.findTouchingNonAdjacentComponents()
					try {
						controller.addComponentGroup(group)
					} 
					catch(err) {
						errorMessage = err.message
					}
				})

				it('should contain a string representation of the overlapping Components',
				   function() {
					for (var i = overlappingComponents.length - 1; i >= 0; i--) {
						errorMessage.should.contain(overlappingComponents[i].toString())
					};
				})
			})	
		})
	})

	describe('#translateTo3dDrawer', function() {
		var fileContents
		var specFile = Configuration.specFileTarget
		var mainFile = Configuration.mainFileTarget
		var paramFile = Configuration.paramFilePath

		function writeToFileAndGetContents(fileName, done) {			
			controller.translateTo3dDrawer()
			fs.readFile(fileName, 'utf8', function(err, data) {
				fileContents = data
				done()
			})
		}

		describe('the generated Main file', function() {
			beforeEach(function(done) {
				writeToFileAndGetContents(mainFile, done)
			})

			it('should write to the file ' + mainFile, function() {
				fs.exists(mainFile, function(exists) {
					exists.should.be.true
				})
			})

			it('should include a header explaining that the file is autogenerated',
			   function() {
			  var infoHeader = '* [GENERATED FILE]'
			  fileContents.should.contain(infoHeader)
			})

			it('should include the contents of the static parameter file', function() {
				var parameterDefinitions = fs.readFileSync(paramFile, 'utf8')
				fileContents.should.contain(parameterDefinitions)
			})

			it('should contain a parameter definiton for shown components', function() {
				fileContents.should.contain("Show: ")
			})
		})

		describe('the generated Specification file', function() {
			beforeEach(function(done) {
				writeToFileAndGetContents(specFile, done)
			})

			it('should write to the file ' + specFile, function() {
				function write() {
					controller.translateTo3dDrawer()
				}

				function addComponents(components) {
					controller = new DrawerInterface(Configuration)
					components.forEach(function(component) {
						controller.addComponent(component)
					})
				}

				SpecificationWriterTest.shouldWriteSpecificationsToFile(write,
					 																											addComponents,
					 																											specFile)
			})

			it('should include a header explaining that the file is autogenerated',
			   function() {
			  var infoHeader = '* [GENERATED FILE]'
			  fileContents.should.contain(infoHeader)
			})

			it('should include a header to allow the file to be used as an OpenJSCAD '
			   + 'library', function() {
			  var libraryHeader = 'Specification = function() {};\n\n'
			  fileContents.should.contain(libraryHeader)
			})

			it('should contain a prefix to allow OpenJSCAD access to the array of '
				 + 'Specifications', function() {
				var componentsPrefix = 'Specification.components = ['
				fileContents.should.contain(componentsPrefix)
			})

			it('should contain a suffix for the array of ComponentSpecifications so that it '
				 + 'is well-formed OpenJSCAD', function() {
				fileContents.should.contain('];')
			})

			describe('with two ComponentSpecifications added', function() {
				var otherComponent

				beforeEach(function(done) { 
					otherComponent = PlaceableComponentTest.createFullySpecifiedTestComponent(10, 20, 30)
					controller.addComponent(component)
					controller.addComponent(otherComponent)
					writeToFileAndGetContents(specFile,done)
				})

				it('should contain a pretty-printed JSON String for both '
					 + 'ComponentSpecifications in an array', function() {
					var array = [component.toSpecification(), 
					 	           otherComponent.toSpecification()]
					fileContents.should.contain(JSON.stringify(array, null, 2))
				})
			})					
		})

		describe('with a ComponentGroup added', function() {
			var group, array, arrayString

			beforeEach(function(done) {
				controller = new DrawerInterface(Configuration)

				group = new PlaceableComponentGroup()
				component = PlaceableComponentTest.createFullySpecifiedTestComponent(0, 0, 0, 1)
				group.addComponent(component)
				otherComponent = PlaceableComponentTest.createFullySpecifiedTestComponent(2, 2, 0, 1)
				group.addComponent(otherComponent)
				
				var components = group.getComponents()
				array = [components[0].toSpecification(), 
				         components[1].toSpecification()]
				controller.addComponentGroup(group)
				writeToFileAndGetContents(specFile, done)
				arrayString = JSON.stringify(array, null, 2)
			})
			
			it('should contain a pretty-printed JSON String for all Specifications '
				 + 'in an array', function() {
				fileContents.should.contain(arrayString)
			})
		})
	})
	
})