/*
 * author: Daniel Patterson
 *
 * Translate Component Specifications into Specifications that are 
 * understandable by the 3D Drawer.
 */
var fs = require('fs')
var console = require('console')
var util = require('util')
var GearTrain = require('../components/GearTrain.js').GearTrain
var GearSpecification = require('../interface/GearSpecification.js').GearSpecification
var SpecificationComposer = require('../interface/SpecificationComposer.js').SpecificationComposer

module.exports.SpecificationWriter = SpecificationWriter

const SPECIFICATION_FILE_NAME = '../3dDrawer/Specification.jscad'

// A header comment for the generated file
const COMMENT_HEADER = '/*\n * [GENERATED FILE]\n *\n * This is a full '
                       + 'specification for a gear system generated by the '
                       + 'constraint\n * modelling aspect of this program.\n '
                       + '*/\n'

// A header to allow OpenJSCAD to use the generated file as a library
const LIBRARY_HEADER = 'Specification = function() {};\n\n'

// A prefix to allow OpenJSCAD access to the GearSpecifications
const COMPONENT_PREFIX = 'Specification.components = '

// A suffix to make sure that the GearSpecification array is well-formed 
//OpenJSCAD
const COMPONENT_SUFFIX = ';'

function SpecificationWriter() {
	var specifications = []
	var composer = new SpecificationComposer()
 
	this.getSpecifications = function() {
		return specifications
	}

	this.addComponent = function(component) {
		if (component instanceof GearTrain) 
			this.addGearTrain(component)
		else
			specifications.push(composer.makeSpecification(component))
	}

	this.addGearTrain = function(train) {
		checkAddingIsPossible(train)
		gears = train.getGears()
		for (var i = 0; i < gears.length; i++) {
			this.addComponent(gears[i])
			if (train.getGenerateSpindlesOnWrite())
				this.addComponent(gears[i].generateSpindle())
		}
	}

	this.writeSpecificationToFile = function() {
		var string = COMMENT_HEADER + LIBRARY_HEADER + COMPONENT_PREFIX
		string += JSON.stringify(specifications, null, 2)
		string += COMPONENT_SUFFIX
		fs.writeFileSync(SPECIFICATION_FILE_NAME, string)
	}

	var checkAddingIsPossible = function(train) {
		if (!train.onlyMeshingGearsTouching()) {
			var errorMessage = createOverlappingGearErrorMessage(train)
			throw new Error(errorMessage)
		}
	}

	var createOverlappingGearErrorMessage = function(train) {
		var string = "Invalid GearTrain - contains overlapping Gears: \n"
		var gears = train.findNonMeshingTouchingGears()
		for (var i = gears.length - 1; i >= 0; i--) {
			string += gears[i].toString() + ',\n'
		};

		string = string.substring (0, string.length - 2) // remove trailing ,\n
		return string
	}
}