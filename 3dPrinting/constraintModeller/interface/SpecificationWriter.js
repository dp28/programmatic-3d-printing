/*
 * This file is part of programmatic-3d-printing, a programmatic 3d printer 
 * language, Copyright (c) 2014, Daniel Patterson <dan24patt@gmail.com>.
 * All rights reserved.
 * 
 * programmatic-3d-printing is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 * 
 * programmatic-3d-printing is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111, USA.
 */

/*
 * author: Daniel Patterson
 *
 * Translate Component Specifications into Specifications that are 
 * understandable by the 3D Drawer.
 */
var fs = require('fs')
var console = require('console')

module.exports.SpecificationWriter = SpecificationWriter

// A header comment for the generated file
const COMMENT_HEADER = '/*\n * [GENERATED FILE]\n *\n * This is a full '
                       + 'specification for a gear system generated by the '
                       + 'constraint\n * modelling aspect of this program.\n '
                       + '*/\n'

// A header to allow OpenJSCAD to use the generated file as a library
const LIBRARY_HEADER = 'Specification = function() {};\n\n'

// A prefix to allow OpenJSCAD access to the GearSpecifications
const COMPONENT_PREFIX = 'Specification.components = '

// A suffix to make sure that the GearSpecification array is well-formed 
//OpenJSCAD
const COMPONENT_SUFFIX = ';'

function SpecificationWriter(specFilePath) {
	var specifications = []
 
	this.getSpecifications = function() {
		return specifications
	}

	this.addAllComponents = function(componentArray) {
		for (var i = 0; i < componentArray.length; i++) {
			specifications.push(componentArray[i].toSpecification())
		}
	}

	this.writeSpecificationToFile = function() {	
		var string = COMMENT_HEADER + LIBRARY_HEADER + COMPONENT_PREFIX
		string += JSON.stringify(specifications, null, 2)
		string += COMPONENT_SUFFIX
		fs.writeFileSync(specFilePath, string)
	}
}