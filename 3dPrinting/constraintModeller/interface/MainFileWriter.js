/*
 * This file is part of programmatic-3d-printing, a programmatic 3d printer 
 * language, Copyright (c) 2014, Daniel Patterson <dan24patt@gmail.com>.
 * All rights reserved.
 * 
 * programmatic-3d-printing is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 * 
 * programmatic-3d-printing is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111, USA.
 */

/*
 * author: Daniel Patterson
 *
 * Generates the main file (the point of entry) for the 3D Drawer, including 
 * user-editable parameters.
 */
var fs = require('fs')

module.exports.MainFileWriter = MainFileWriter
const STATIC_PARAMETER_DEFINITIONS = '../3dDrawer/parameterDefinitions.txt'

// A header comment for the generated file
const COMMENT_HEADER = '/*\n * [GENERATED FILE]\n *\n * This is the point of '
                       + 'entry for an OpenJSCAD 3D drawer generated by the '
                       + 'constraint\n * modelling aspect of this program.\n '
                       + '*/\n'

// Link the main file to the static parts of the 3D Drawer
const DRAWER_INCLUDE = 'include("Drawer.jscad")\n'

// The function that allows the 3D Drawer access to user input
const GET_PARAMS_START = '\nfunction getParameterDefinitions() {\n\treturn ['
const GET_PARAMS_END = '];\n}\n\n'

const MAIN_METHOD = 'function main(params) {\n\t' 
                    + 'return Drawer.drawComponents(params)\n}'

function MainFileWriter(mainFilePath, jscadDirectories) {

	this.generateMainFile = function(dynamicParameterDefinitions) {
		var content = buildFileContent(dynamicParameterDefinitions) 
		fs.writeFileSync(mainFilePath, content)

	}

	var buildFileContent = function(dynamicParameterDefinitions) {		
		var contents = COMMENT_HEADER + DRAWER_INCLUDE 
		contents += generateIncludesFromJscadDirectories()
		contents += GET_PARAMS_START
		contents += getStaticParameterDefinitions() + dynamicParameterDefinitions
		contents += GET_PARAMS_END + MAIN_METHOD
		return contents
	}

	var getStaticParameterDefinitions = function() {
		return fs.readFileSync(STATIC_PARAMETER_DEFINITIONS, 'utf8')
	}

	/*
	 * Dynamically includes components specified in the Configuration file into 
	 * the main file.
	 */
	var generateIncludesFromJscadDirectories = function() {
		var includeString = ""
		jscadDirectories.forEach(function(directory) {
			includeString += generateIncludesFromJscadDirectory(directory)
		})
		return includeString
	}

	var generateIncludesFromJscadDirectory = function(directory) {
		var includeString = ""
		fs.readdirSync(directory).forEach(function(file) {
			if (file.match(/\.jscad$/))
				includeString += 'include("' + file + '")\n'
		})
		return includeString
	}
}